{"version":3,"sources":["../src/Featherhead.js"],"names":[],"mappings":";;;;;;;;;;;;uBAAsB,WAAW;;qBACV,SAAS;;IAApB,KAAK;;IAEJ,WAAW;AAEX,WAFA,WAAW,GAED;QAAT,IAAI,gCAAC,EAAE;;0BAFR,WAAW;;AAGpB,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,SAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AACpB,UAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,UAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;;AAED,QAAI,CAAC,IAAI,CAAC,MAAM,IAAK,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,AAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE;AACjF,YAAM,KAAK,CAAC,2DAA2D,CAAC,CAAA;KACzE;;AAED,QAAI,CAAC,IAAI,CAAC,MAAM,IAAK,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,AAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE;AACjF,YAAM,KAAK,CAAC,2DAA2D,CAAC,CAAA;KACzE;GACF;;eAhBU,WAAW;;WAkBf,iBAAC,IAAI,EAAE;AACZ,UAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,YAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;OACvB;;AAED,UAAI,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3C,UAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEtC,UAAI,IAAI,GAAG;AACT,YAAI,EAAK,IAAI,CAAC,IAAI;AAClB,WAAG,EAAM,IAAI,CAAC,GAAG;AACjB,YAAI,EAAK,IAAI,CAAC,IAAI;AAClB,eAAO,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;OACzC,CAAC;;AAEF,aAAO,SApCH,OAAO,CAoCI,OAAO,CAAC,IAAI,CAAC,CAAC;KAC9B;;;SAlCU,WAAW;;;QAAX,WAAW,GAAX,WAAW","file":"Featherhead.js","sourcesContent":["import {Promise} from './Promise';\nimport * as Utils from './Utils';\n\nexport class Featherhead {\n\n  constructor(info={}) {\n    let keys = Object.keys(info);\n    for (let idx in keys) {\n      let key = keys[idx];\n      this[key] = info[key];\n    }\n\n    if (!this.commit || (typeof this.commit !== 'string') || this.commit.length != 40) {\n      throw Error(\"Featherhead: invalid commit option passed to constructor.\")\n    }\n\n    if (!this.assets || (typeof this.assets !== 'string') || this.assets.length != 40) {\n      throw Error(\"Featherhead: invalid assets option passed to constructor.\")\n    }\n  }\n\n  resolve(unit) {\n    if (typeof unit === 'string') {\n      unit = { path: unit };\n    }\n\n    unit.path = Utils.normalizePath(unit.path);\n    var info = Utils.splitPath(unit.path);\n\n    var unit = {\n      path:    unit.path,\n      dir:     info.dir,\n      base:    info.base,\n      address: Utils.naddress(this, unit.path)\n    };\n\n    return Promise.resolve(unit);\n  }\n\n}\n"]}